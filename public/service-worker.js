const CACHE_ASSETS = 'assets-v1';
const assets = [
  '/',
  '/index.html',
  '/manifest.json',
  '/static/main.css',
  '/static/main.js', // ‚ö†Ô∏è V√©rifie le bon chemin de tes fichiers compil√©s
  '/favicon.ico'
];

// üìå Installation du service worker
self.addEventListener('install', (event) => {
  console.log('[ServiceWorker] Installation...');
  event.waitUntil(
    caches.open(CACHE_ASSETS).then((cache) => {
      console.log('[ServiceWorker] Mise en cache des ressources...');
      return cache.addAll(assets);
    }).catch((error) => console.error('‚ö†Ô∏è Erreur de mise en cache :', error))
  );
});

// üìå Activation du service worker et suppression des anciens caches
self.addEventListener('activate', (event) => {
  console.log('[ServiceWorker] Activation...');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== CACHE_ASSETS) {
            console.log('[ServiceWorker] Suppression de l\'ancien cache :', cache);
            return caches.delete(cache);
          }
        })
      );
    })
  );
});


const putInCache = async (request, response) => {
  const url = new URL(request.url);
  if (!url.protocol.includes('http')) {
    console.warn(`mise en cache impossible sur ${request.url}`);
    return;
  }
  const cache = await caches.open("v1");
  await cache.put(request, response);
};


self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'CREATE_CATEGORY') {
    const { name, options } = event.data.data;
    console.log('Nouvelle cat√©gorie re√ßue:', { name, options });

    const categoryData = JSON.stringify({ name, options });
    const request = new Request(`/categories/${name}`);
    const response = new Response(categoryData, { status: 200, statusText: 'success' });

    // Mise en cache de la cat√©gorie
    caches.open('v1').then((cache) => {
      cache.put(request, response).then(() => {
        console.log(`Cat√©gorie ${name} mise en cache`);
      }).catch((error) => {
        console.error('Erreur lors de la mise en cache de la cat√©gorie :', error);
      });
    });
  }
});


self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      if (cachedResponse) {
        console.log(`‚úÖ Ressource servie depuis le cache : ${event.request.url}`);
        return cachedResponse;
      }

      // V√©rification si la requ√™te correspond √† une cat√©gorie
      const url = new URL(event.request.url);
      if (url.pathname.startsWith('/categories/')) {
        const categoryName = url.pathname.replace('/categories/', ''); // R√©cup√®re le nom de la cat√©gorie
        console.log(`üîÑ Requ√™te pour la cat√©gorie: ${categoryName}`);

        return caches.match(`/categories/${categoryName}`).then((cachedCategory) => {
          if (cachedCategory) {
            console.log(`‚úÖ Cat√©gorie ${categoryName} servie depuis le cache`);
            return cachedCategory;
          }

          console.log(`üåç Aucune cat√©gorie trouv√©e dans le cache, tentative de r√©cup√©ration depuis le r√©seau`);
          return fetch(event.request).then((networkResponse) => {
            // Mise en cache de la cat√©gorie apr√®s r√©cup√©ration du r√©seau
            return caches.open('v1').then((cache) => {
              cache.put(event.request, networkResponse.clone());
              console.log(`üì• Cat√©gorie ${categoryName} mise en cache`);
              return networkResponse;
            });
          });
        });
      }

      // Si ce n'est pas une requ√™te pour une cat√©gorie, r√©cup√©rer normalement du r√©seau
      return fetch(event.request).then((networkResponse) => {
        return caches.open(CACHE_ASSETS).then((cache) => {
          putInCache(event.request, networkResponse.clone());
          return networkResponse;
        });
      });
    })
  );
});

self.addEventListener('message', async(event) => {
  if (event.data && event.data.type === 'DELETE_CATEGORY') {
  try {
    const cache = await caches.open('v1');
    const cacheKeys = await caches.keys();
    for (const request of cacheKeys) {
      const requestUrl = new URL(request.url);
      if (requestUrl.pathname.startsWith(`/categories/`)) {
        await cache.delete(requestUrl.pathname);
        console.log(`Cat√©gorie supprim√©e du cache ${requestUrl.pathname}`);
      }
    }
    console.log('[ServiceWorker] Deleting...');
    } catch (error) {
    console.error('Erreur pour la suppression de l\'ancien cache :', error);
  }
  }
})

